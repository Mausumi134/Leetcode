class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>indegree(n);
        vector<vector<int>>adj(n);

        for(int i=0;i<n;i++){
            for(auto nbr:graph[i]){
                adj[nbr].push_back(i);
                indegree[i]++;
            }
        }

        queue<int>q;

        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.push(i);
            }
        }

        vector<bool>safe(n,false);

        while(!q.empty()){
            int node=q.front();
            q.pop();
            safe[node]=true;

            for(auto nbr:adj[node]){
                indegree[nbr]--;
                if(indegree[nbr]==0){
                    q.push(nbr);
                }
            }

        }
        vector<int>ans;

        for(int i=0;i<n;i++){
            if(safe[i]){
                ans.push_back(i);
            }
        }
        return ans;
    }
};