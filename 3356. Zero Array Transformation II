class Solution {
public:
    bool possible(vector<int> nums, vector<vector<int>>& queries, int k) {
        int n=nums.size();
       vector<int>diff(n,0);

       for(int i=0;i<k;i++){
           int l=queries[i][0];
           int r=queries[i][1];
           int v=queries[i][2];

           diff[l]+=v;
           if(r+1<n){
            diff[r+1]-=v;
           }
       }
       int cumsum=0;
       for(int i=0;i<n;i++){
        cumsum+=diff[i];
        diff[i]=cumsum;

        if(nums[i]-diff[i]>0){
            return false;
        }
       }
        return true;
    }

    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int l=0, r=queries.size(), ans = -1;

        while(l<=r) {
            int mid=l+(r-l)/2;
            
            if (possible(nums,queries,mid)) { 
                ans=mid;
                r=mid-1;
            } 
            else {
                l=mid+1; 
            }
        }
        return ans;
    }
};
