/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if (!root) return root;

        queue<TreeNode*> q;
        q.push(root);
        vector<int> levelsum;
        while (!q.empty()) {
            int sum = 0;
            int n = q.size();
            for (int i = 0; i < n; i++) {
                TreeNode* node = q.front();
                q.pop();
                sum += node->val;
                if (node->left != NULL) q.push(node->left);
                if (node->right != NULL) q.push(node->right);
            }
            levelsum.push_back(sum);
        }
        q.push(root);
        int levelIndex = 1; 
        root->val = 0; 

        while (!q.empty()) {
            int n = q.size();
            for (int i = 0; i < n; i++) {
                TreeNode* node = q.front();
                q.pop();
                int siblingSum = (node->left ? node->left->val : 0) + (node->right ? node->right->val : 0);
                if (node->left) {
                    node->left->val = levelsum[levelIndex] - siblingSum;
                    q.push(node->left);
                }
                if (node->right) {
                    node->right->val = levelsum[levelIndex] - siblingSum;
                    q.push(node->right);
                }
            }
            levelIndex++; 
        }

        return root;
    }
};
