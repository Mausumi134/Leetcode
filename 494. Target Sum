class Solution {
public:
    int count(int i, int target, vector<int>& nums, vector<vector<int>>& dp, int offset) {
        if (i == nums.size()) {
            return target == 0 ? 1 : 0;
        }

        if (target + offset < 0 || target + offset >= dp[0].size()) {
            return 0;
        }

        if (dp[i][target + offset] != -1) {
            return dp[i][target + offset];
        }

        int add = count(i + 1, target - nums[i], nums, dp, offset);
        int subtract = count(i + 1, target + nums[i], nums, dp, offset);

        return dp[i][target + offset] = add + subtract;
    }

    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int sum = accumulate(nums.begin(), nums.end(), 0);
        if (abs(target) > sum) {
            return 0;
        }
        int offset = sum;
        vector<vector<int>> dp(n, vector<int>(2 * sum + 1, -1));
        return count(0, target, nums, dp, offset);
    }
};
