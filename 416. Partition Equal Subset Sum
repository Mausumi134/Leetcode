class Solution {
public:
    bool solve(int i,vector<int>& nums,int target,vector<vector<int>>& dp){
        if(target==0)return true;

        if(i==0){
            return nums[0]==target;
        }

        if(dp[i][target]!=-1)return dp[i][target];

        bool nottaken=solve(i-1,nums,target,dp);

        bool taken=false;
        if(nums[i]<=target){
            taken=solve(i-1,nums,target-nums[i],dp);
        }
        return dp[i][target]=taken|| nottaken;
    }
    bool canPartition(vector<int>& nums) {
        int n=nums.size();
        int sum=accumulate(nums.begin(),nums.end(),0);

        if(sum%2==0){
            int target=sum/2;
            vector<vector<int>>dp(n,vector<int>(target+1,-1));
            return solve(n-1,nums,target,dp);
        }
        else{
            return false;
        }
    }
};