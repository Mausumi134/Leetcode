class Solution {
public:
    int count = 0;
    vector<vector<int>> tree;
    vector<int> v;

    long long int dfs(int u, int p, int k ){

        long long int sum = v[u];
        for(int v:tree[u]){
            if(v!=p){
                sum += dfs(v, u, k);
            }
        }

        if(sum%k==0){
            count++;
            return 0;
        }
        return sum;
    }   

    int maxKDivisibleComponents(int n, vector<vector<int>>& edges, vector<int>& values, int k) {
        tree.resize(n);
        v = values;

        for(int i=0;i<edges.size();i++){
            tree[edges[i][0]].push_back(edges[i][1]);
            tree[edges[i][1]].push_back(edges[i][0]);
        }

        dfs(0, -1, k);

        return count;
    }
};