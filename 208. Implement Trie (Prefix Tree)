struct Node{
     Node* links[26];
     bool flag=false;
     bool containskey(char c){
        return links[c-'a']!=NULL;
     }
     void put(char c,Node* node){
        links[c-'a']=node;
     }
     Node* get(char c){
        return links[c-'a'];
     }
     void setend(){
        flag=true;
     }
     bool isend(){
        return flag;
     }
};


class Trie {
public:
    Node* root;
    Trie() {
       root=new Node(); 
    }
    
    void insert(string word) {
        Node* node=root;
        for(char c:word){
            if(!node->containskey(c)){
                node->put(c,new Node());
            }
            node=node->get(c);
        }

        node->setend();
    }
    
    bool search(string word) {
        Node* node=root;
        for(char c:word){
            if(!node->containskey(c)){
                return false;
            }
            node=node->get(c);
        }
        return node->isend();
    }
    
    bool startsWith(string prefix) {
        Node* node=root;
        for(char c:prefix){
            if(!node->containskey(c)){
                return false;
            }
            node=node->get(c);
        }
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */